import streamlit as st
import tensorflow as tf
import numpy as np
import cv2
from PIL import Image
import matplotlib.pyplot as plt
import time
import io
import os

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="H·ªá Th·ªëng Ph√¢n Lo·∫°i Kh·ªëi U N√£o MRI",
    page_icon="üß†",
    layout="wide"
)

# Ti√™u ƒë·ªÅ v√† th√¥ng tin
st.title("üß† H·ªá Th·ªëng Ph√¢n Lo·∫°i Kh·ªëi U N√£o MRI")
st.markdown("""
    H·ªá th·ªëng n√†y ph√¢n lo·∫°i ·∫£nh MRI n√£o th√†nh 4 nh√≥m: **Glioma**, **Meningioma**, **No_Tumor** (Kh√¥ng c√≥ u) v√† **Pituitary** (U tuy·∫øn y√™n).
    
    T·∫£i l√™n ·∫£nh MRI ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£ ph√¢n lo·∫°i.
""")

# H√†m t·∫£i m√¥ h√¨nh
@st.cache_resource
def load_model():
    try:
        model = tf.keras.models.load_model('best_resnet_attention_model.h5')
        return model
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh: {e}")
        return None

# H√†m ti·ªÅn x·ª≠ l√Ω ·∫£nh
def preprocess_image(image, target_size=(224, 224)):
    # Chuy·ªÉn ƒë·ªïi sang m·∫£ng numpy n·∫øu l√† PIL Image
    if isinstance(image, Image.Image):
        image = np.array(image)
    
    # ƒê·∫£m b·∫£o h√¨nh ·∫£nh l√† RGB
    if len(image.shape) == 2:
        image = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)
    elif image.shape[2] == 4:  # RGBA
        image = cv2.cvtColor(image, cv2.COLOR_RGBA2RGB)
    
    # Resize v·ªÅ k√≠ch th∆∞·ªõc 224x224 
    image = cv2.resize(image, target_size)
    
    # Chu·∫©n h√≥a v·ªÅ gi√° tr·ªã [0,1]
    image = image.astype('float32') / 255.0
    
    return image

# H√†m d·ª± ƒëo√°n
def predict(model, image):
    # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
    processed_img = preprocess_image(image)
    
    # M·ªü r·ªông k√≠ch th∆∞·ªõc batch
    img_batch = np.expand_dims(processed_img, axis=0)
    
    # D·ª± ƒëo√°n
    start_time = time.time()
    prediction = model.predict(img_batch)
    end_time = time.time()
    
    # L·∫•y class_id c√≥ x√°c su·∫•t cao nh·∫•t
    predicted_class_id = np.argmax(prediction, axis=1)[0]
    
    # √Ånh x·∫° c√°c l·ªõp
    class_names = {0: 'Glioma', 1: 'Meningioma', 2: 'No_Tumor', 3: 'Pituitary'}
    predicted_class = class_names[predicted_class_id]
    
    # T√≠nh x√°c su·∫•t cho m·ªói l·ªõp
    probabilities = prediction[0]
    
    # Th·ªùi gian x·ª≠ l√Ω
    processing_time = end_time - start_time
    
    return predicted_class, probabilities, processing_time, processed_img

# T·∫°o visualize CAM (Class Activation Map) ƒë·ªÉ xem model ch√∫ √Ω v√†o v√πng n√†o
def get_grad_cam(model, image, layer_name='attention_block'):
    # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
    img_array = preprocess_image(image)
    img_tensor = np.expand_dims(img_array, axis=0)
    
    try:
        # T√¨m l·ªõp attention ho·∫∑c l·ªõp cu·ªëi c·ªßa ConvNet
        last_conv_layer = None
        for layer in model.layers:
            if layer_name in layer.name:
                last_conv_layer = layer
                break
        
        if last_conv_layer is None:
            # N·∫øu kh√¥ng t√¨m th·∫•y attention block, d√πng l·ªõp conv cu·ªëi c√πng
            for layer in reversed(model.layers):
                if isinstance(layer, tf.keras.layers.Conv2D):
                    last_conv_layer = layer
                    break
        
        if last_conv_layer is None:
            return None
        
        # T·∫°o model ƒë·ªÉ l·∫•y feature maps t·ª´ l·ªõp cu·ªëi
        grad_model = tf.keras.models.Model(
            inputs=[model.inputs],
            outputs=[last_conv_layer.output, model.output]
        )
        
        # Gradient tape ƒë·ªÉ t√≠nh gradients
        with tf.GradientTape() as tape:
            conv_outputs, predictions = grad_model(img_tensor)
            predicted_class = tf.argmax(predictions[0])
            class_output = predictions[:, predicted_class]
            
        # Gradient c·ªßa output ƒë·ªëi v·ªõi feature maps
        grads = tape.gradient(class_output, conv_outputs)
        pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))
        
        # Nh√¢n feature maps v·ªõi gradient weights
        conv_outputs = conv_outputs[0]
        heatmap = tf.reduce_sum(tf.multiply(pooled_grads, conv_outputs), axis=-1)
        
        # Chu·∫©n h√≥a heatmap
        heatmap = tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)
        heatmap = heatmap.numpy()
        
        # Resize heatmap v·ªÅ k√≠ch th∆∞·ªõc ·∫£nh g·ªëc
        heatmap = cv2.resize(heatmap, (img_array.shape[1], img_array.shape[0]))
        
        # Chuy·ªÉn heatmap th√†nh m√†u
        heatmap = np.uint8(255 * heatmap)
        heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)
        
        # Chuy·ªÉn ·∫£nh g·ªëc v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng
        superimposed_img = np.uint8(img_array * 255)
        superimposed_img = cv2.cvtColor(superimposed_img, cv2.COLOR_RGB2BGR)
        
        # K·∫øt h·ª£p ·∫£nh g·ªëc v√† heatmap
        superimposed_img = heatmap * 0.4 + superimposed_img
        
        # Chuy·ªÉn v·ªÅ RGB ƒë·ªÉ hi·ªÉn th·ªã
        superimposed_img = cv2.cvtColor(np.uint8(superimposed_img), cv2.COLOR_BGR2RGB)
        
        return superimposed_img
        
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o Grad-CAM: {e}")
        return None

# T·∫£i m√¥ h√¨nh
model = load_model()

# T·∫°o layout 2 c·ªôt
col1, col2 = st.columns([1, 1])

# C·ªôt b√™n tr√°i ƒë·ªÉ upload ·∫£nh
with col1:
    st.subheader("T·∫£i l√™n ·∫£nh MRI n√£o")
    uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh MRI", type=["jpg", "jpeg", "png"])
    
    # T√πy ch·ªçn n√¢ng cao (c√≥ th·ªÉ ·∫©n ƒëi m·∫∑c ƒë·ªãnh)
    with st.expander("T√πy ch·ªçn n√¢ng cao", expanded=False):
        show_cam = st.checkbox("Hi·ªÉn th·ªã b·∫£n ƒë·ªì nhi·ªát (CAM)", value=True)
    
    # N√∫t d·ª± ƒëo√°n
    predict_button = st.button("Ph√¢n lo·∫°i ·∫£nh")

# C·ªôt b√™n ph·∫£i ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
with col2:
    st.subheader("K·∫øt qu·∫£ ph√¢n lo·∫°i")
    
    if uploaded_file is not None:
        # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n
        image = Image.open(uploaded_file)
        st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_column_width=True)
        
        if predict_button:
            if model is not None:
                # D·ª± ƒëo√°n
                with st.spinner('ƒêang ph√¢n lo·∫°i ·∫£nh...'):
                    try:
                        predicted_class, probabilities, processing_time, processed_img = predict(model, image)
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        st.success(f"**K·∫øt qu·∫£ ph√¢n lo·∫°i:** {predicted_class}")
                        st.info(f"Th·ªùi gian x·ª≠ l√Ω: {processing_time:.4f} gi√¢y")
                        
                        # Hi·ªÉn th·ªã c√°c x√°c su·∫•t d∆∞·ªõi d·∫°ng thanh ti·∫øn tr√¨nh
                        st.subheader("X√°c su·∫•t c·ªßa c√°c l·ªõp:")
                        class_names = ['Glioma', 'Meningioma', 'No_Tumor', 'Pituitary']
                        for i, cls in enumerate(class_names):
                            prob = probabilities[i] * 100
                            st.metric(
                                label=cls,
                                value=f"{prob:.2f}%",
                                delta=f"{prob - 25:.2f}%" if prob > 25 else f"{prob - 25:.2f}%"
                            )
                            st.progress(float(prob) / 100)
                            
                        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì nhi·ªát (Grad-CAM)
                        if show_cam:
                            st.subheader("V√πng ch√∫ √Ω c·ªßa m√¥ h√¨nh (Grad-CAM):")
                            with st.spinner('ƒêang t·∫°o b·∫£n ƒë·ªì nhi·ªát...'):
                                cam_image = get_grad_cam(model, image)
                                if cam_image is not None:
                                    st.image(cam_image, caption="B·∫£n ƒë·ªì nhi·ªát cho v√πng quan tr·ªçng", use_column_width=True)
                                else:
                                    st.warning("Kh√¥ng th·ªÉ t·∫°o b·∫£n ƒë·ªì nhi·ªát cho ·∫£nh n√†y.")
                                    
                    except Exception as e:
                        st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")
                        st.exception(e)
            else:
                st.error("Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n ƒë·∫øn file m√¥ h√¨nh.")

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ m√¥ h√¨nh v√† l·ªõp
with st.expander("Th√¥ng tin v·ªÅ c√°c lo·∫°i kh·ªëi u", expanded=False):
    st.markdown("""
    ### C√°c lo·∫°i kh·ªëi u n√£o:
    
    1. **Glioma**: 
       - L√† kh·ªëi u ph√°t sinh t·ª´ t·∫ø b√†o h·ªó tr·ª£ (t·∫ø b√†o ƒë·ªám) trong n√£o
       - C√≥ th·ªÉ l√† l√†nh t√≠nh ho·∫∑c √°c t√≠nh
       - Bao g·ªìm c√°c lo·∫°i nh∆∞ u sao b√†o, u th·∫ßn kinh ƒë·ªám v√† u nguy√™n b√†o ƒë·ªám
    
    2. **Meningioma**:
       - Ph√°t tri·ªÉn t·ª´ m√†ng n√£o (m√†ng bao quanh n√£o v√† t·ªßy s·ªëng)
       - Th∆∞·ªùng l√† l√†nh t√≠nh v√† ph√°t tri·ªÉn ch·∫≠m
       - C√≥ th·ªÉ g√¢y √°p l·ª±c l√™n n√£o v√† c√°c d√¢y th·∫ßn kinh
    
    3. **Pituitary** (U tuy·∫øn y√™n):
       - Ph√°t tri·ªÉn ·ªü tuy·∫øn y√™n, m·ªôt tuy·∫øn nh·ªè n·∫±m ·ªü ƒë√°y n√£o
       - Th∆∞·ªùng l√† l√†nh t√≠nh
       - C√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª± s·∫£n xu·∫•t hormone v√† g√¢y ra c√°c v·∫•n ƒë·ªÅ v·ªÅ n·ªôi ti·∫øt
    
    ### Ph∆∞∆°ng ph√°p ph√¢n lo·∫°i:
    
    M√¥ h√¨nh n√†y s·ª≠ d·ª•ng m·∫°ng n∆°-ron t√≠ch ch·∫≠p (CNN) v·ªõi ki·∫øn tr√∫c ResNet50V2 k·∫øt h·ª£p c∆° ch·∫ø Attention ƒë·ªÉ ph√¢n lo·∫°i ch√≠nh x√°c c√°c lo·∫°i kh·ªëi u n√£o t·ª´ ·∫£nh MRI.
    """)

# Footer
st.markdown("""
---
**L∆∞u √Ω:** K·∫øt qu·∫£ ph√¢n lo·∫°i n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o v√† kh√¥ng thay th·∫ø cho ch·∫©n ƒëo√°n y t·∫ø chuy√™n nghi·ªáp.
""")